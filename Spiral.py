'''
Спираль

Алгоритм:
1) заполнение списка data первой строкой от 1 до n
2) цикл, состоящий из двух паттернов:
    1.  после построения первой строки, длина которой
        равна n, необходимо добавлять числа в список
        по спирали по часовой стрелке, таким образом,
        на первой итерации цикла необходимо совершить
        движение вниз и влево, и количество элементов,
        заполняемых в столбец и строку будет уменьшено
        на 1, поскольку 1 элемент уже будет в столбце
        или строке.
    2.  после движения спирали вниз и влево, необходимо
        закончить первый круг спирали даижвением вверх
        и вправо, и эти строки будут изначально иметь уже
        2 элемента, поэтому для дальнейшего построения спирали
        необходимо уменьшить количество добавляемых элементов
        на 1.

'''


# Число строк и столбцов матрицы
num = int(input())

# Список для хранения спирали
data = []

# Доп списки
for i in range(num):
    data += [[]]

# Нули на каждый i,j
for i in range(num):
    for j in range(num):
        data[i].append(0)

# Счетчик для заполнения data
count = 1

# Первые n чисел (первая строка)
for j in range(num):
    data[0][j] = count
    count += 1

# После этого:
# - движение вниз влево: n-=1
# - движение вверх вправо: еще n-=1

# Следующее движение - вниз, следовательно, уменьшаем n на единицу
n = num - 1

# Курсор сдвигается на 1 вниз, поскольку первая строка заполнена полностью
i = num - n
# Значения заполняются в последнем столбце
j = n

while n > 0:

    # Движение вниз
    for k in range(n):
        data[i][j] = count
        count += 1
        i += 1
    # Компенсация лишнего инкремента
    i -= 1
    # Смещение курсора влево
    j -= 1

    # Движение влево
    for k in range(n):
        data[i][j] = count
        count += 1
        j -= 1
    # Компенсация лишнего декремента
    j += 1
    # Смещение курсора вверх
    i -= 1

    # Следующее движение - вверх, необходимо уменьшить n
    n -= 1

    # Движение вверх
    for k in range(n):
        data[i][j] = count
        count += 1
        i -= 1
    # Компенсация декремента
    i += 1
    # Смещение курсора вправо
    j += 1

    # Движение вправо
    for k in range(n):
        data[i][j] = count
        count += 1
        j += 1
    # Компенсация инкремента
    j -= 1
    # Смещение курсора вниз
    i += 1

    # Следующее движение - вниз, необходимо уменьшить n
    n -= 1


for i in data:
    for j in range(len(i)):
        if j < len(i)-1:
            print(i[j], end=' ')
        else:
            print(i[j])
